<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>practice</title>
    <link rel="stylesheet" href="ARPS.css">
</head>
<body>
    
    <div class="body-of-game">
        <p class="title">Rock Paper Scissors</p>

        <button class="move-button js-rock-button"><img src="rock-emoji.png"class = "move-icon"></button>
        <button class="move-button js-paper-button"><img src="paper-emoji.png" class = "move-icon"></button>
        <button class="move-button js-scissors-button"><img src="scissors-emoji.png"class = "move-icon"></button>

        <p class="js-results"></p>
        <p class="js-moves"></p>
        <p class="js-score score"></p>

        <button class="reset-score-button js-reset-button">Reset Score</button>
        <button class="auto-play-button js-auto-play-button">Auto Play</button>
        <div class="js-Play-or-not"></div>
    </div>
    
    
    <script src="ARPS.js"></script>
</body>
</html>

css----------------------------------------------------------------------------------------------------------------------------------------------------------------------->

/* Reset default margin and padding */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
p{
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Body styles */
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

/* Game container styles */
.body-of-game {
    background-color: #ce8989;
    border: 1px solid #720c0c;
    border-radius: 10px;
    padding: 20px;
    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;
}

/* Title styles */
.title {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
}

/* Move button styles */
.move-button {

    background-color: #363f46;
    color: #fff;
    border: none;
    border-radius: 60px;
    padding: 20px;
    margin: 10px;
    cursor: pointer;
    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;
    transition: background-color 0.3s;
}

.move-button:hover {
    background-color: #e68888;
}

.move-icon {
    width: 40px;
    height: 40px;
}

/* Results and Moves styles */
.js-results, .js-moves {
    font-weight: 400;
    font-size: 25px;
    margin-top: 20px;
}

/* Score styles */
.js-score {
    font-size: 20px;
    font-weight: 500;
    margin-top: 20px;
}

/* Reset and Auto Play button styles */
.js-reset-button, .js-auto-play-button {
    margin-bottom: 20px;
    background-color: #c2365e;
    color: #000000;
    border: 1px solid rgb(71, 7, 7);
    border-radius: 5px;
    padding: 10px 20px;
    margin-top: 20px;
    margin-left: 10px;
    /* margin: 10px; */
    cursor: pointer;
    transition: background-color 0.3s;
}

.js-reset-button:hover, .js-auto-play-button:hover {
    background-color: #5d75a1;
}

.yes-button , .no-button {
    padding: 10px;
    border-radius: 10px;
    width: 50px;
}


js----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->

//  updating the score to new values that are already saved
//  in the local storage in line 80 no. so that if we reload
//  the page the score do not start with 0 instead of that
//  we start it where we left it in the local storage
let score = JSON.parse(localStorage.getItem('score')) || {
    wins : 0,
    losses : 0,
    ties : 0 ,
    move : ' '
};


//fucntion to pick move by computer
function computerPicked() {
    var num = Math.random();
    if(num < 1/3) {
        return 'Rock';
    }else if(num >= 1/3 && num < 2/3) {
        return 'Paper';
    }else{
        return 'Scissors';
    }
} 

function askToReset() {
    document.querySelector('.js-Play-or-not').innerHTML = '<p>Are you sure you want to reset the score? < border radbutton class="js-yes-button yes-button">Yes</button> <button class="js-no-button no-button">No</button></p>';
    document.querySelector('.js-yes-button').addEventListener('click', (event) => {
        console.log(event);
        resetScore();
        document.querySelector('.js-Play-or-not').innerHTML = ' ';
    });

    document.querySelector('.js-no-button').addEventListener('click', (event) => {
        document.querySelector('.js-Play-or-not').innerHTML = ' ';
    });
}


//fucntion to update the score
function updateScore() {
    document.querySelector('.js-score').innerHTML = `wins : ${score.wins} , Losses : ${score.losses} and Ties! : ${score.ties}`;
}

function resetScore() {
    score.wins = 0;
    score.losses =0;
    score.ties = 0;
    updateScore();
    localStorage.removeItem('score');
}

// Reset button
document.querySelector('.js-reset-button').addEventListener('click', (event) => {
    askToReset();
});

//Reset using backspace
document.body.addEventListener('keydown' , (event) => {
    const buton = event.key;
    if(buton == ' ') {
        askToReset();
    }
});


//this command is to show the game score that have achieved before reloadibng the page 
//the same command in the last of the function will be responsible for updated value viewing
updateScore();


//function to auto play the game
let isPlaying = false;
let intervalId;

//if auto play is on make the button 'stop Playing' else when make it 'Auto Play'
function changeState() {
    const state = document.querySelector('.js-auto-play-button').innerHTML;
    if(state === 'Auto Play') {
        document.querySelector('.js-auto-play-button').
        innerHTML =  'Stop Playing';
    }else{
        document.querySelector('.js-auto-play-button').
        innerHTML = 'Auto Play';
    }
}

function autoPlay() {
    changeState();

    if(!isPlaying) {
        intervalId = setInterval(() => {
            const playerMove = computerPicked();
            playGame(playerMove);
        } , 1000);
        isPlaying = true;
    }else{
        clearInterval(intervalId);
        isPlaying = false;
    }
}


//Rock button
document.querySelector('.js-rock-button').
addEventListener('click' , () => {
    playGame('Rock');
});

//Paper button
document.querySelector('.js-paper-button').
addEventListener('click' , () => {
    playGame('Paper');
});

//Scissors button
document.querySelector('.js-scissors-button').
addEventListener('click' , () => {  
    playGame('Scissors');
});




//autoplay button
document.querySelector('.js-auto-play-button').
addEventListener('click' , () => {
    autoPlay();
});

//auto play using key
document.body.addEventListener('keydown' , (event) => {
    const val = event.key;
    if(val === 'a') {
        autoPlay();
    }
});



//play using key
document.body.addEventListener('keydown' , (event) => {
    const val = event.key;
    if(val === 'r') {
        playGame('rock');
    }else if(val === 's') {
        playGame('scissors');
    }else if(val === 'p') {
        playGame('paper');
    }
});


//fucntion to play the game
function playGame(myMove) {
    var result;
    var computerMove = computerPicked();
    if(myMove === 'Rock') {
        score.move = 'Rock';
        if(computerMove === 'Rock') {
            score.ties++;
            result = 'Ties!';
        }
        else if(computerMove === 'Paper') {
            score.losses++; 
            result = 'Lose!';
        }
        else{
            score.wins++;
            result = 'Win!';
        }
    }
    else if(myMove === 'Paper') {
        score.move = 'Paper';
        if(computerMove === 'Rock') {
            score.wins++;
            result = 'Win!';
        }
        else if(computerMove === 'Paper') {
            score.ties++; 
            result = 'Ties!';
        }
        else{
            score.losses++;
            result = 'Lose!';
        }
    }
    else{
        score.move = 'Scissors';
        if(computerMove === 'Rock') {
            score.losses++;
            result = 'Lose!';
        }
        else if(computerMove === 'Paper') {
            score.wins++; 
            result = 'Win!';
        }
        else{
            score.ties++;
            result = 'Ties!';
        }
    }

    document.querySelector('.js-moves').innerHTML = `You 
        <img src="${myMove}-emoji.png" class = "move-icon" >
        <img src="${computerMove}-emoji.png" class = "move-icon">
        computer`;
    document.querySelector('.js-results').innerHTML = `${result}`;
    //results
    localStorage.setItem('score' , JSON.stringify(score));

    //applied so that when we click any of the 3 buttons this command is executed 
    updateScore();
}



